struct Closed_polyline
: Open_polyline {            //Замкнутая последувательность линий
using Open_polyline::Open_polyline; //Используєт конструктори
                      //Open_plyline
void draw_lines() const;
};

void Closed_polyline::draw_lines() const
{
Open_polyline::draw_lines(); //Ввод откритой последувательності.
// затем вивод замикающей линии
if (2<number_of_points() && color() .visibility())
fl_line(point(number_of_points()-1) .x,
point(number_of_points()-1) .y,
point(0) .x,
point(0) .y;
}
 //Wota dali
cpl.add(point(100,250));
//We wota slojne
struct Polygon : Closed_polyline {
using Closed_polyline::Closed_polyline;
void add(point p);
void draw_lines() const;
};
void Polygon::add(Point p)
{
//ne peresikae suwestwueshe
Closed_polyline::add(p);
}

Polygon poly = {
{100,100}, {150,200}, {250,250}, {300,200}
};
//Pramokytnik
struct Rectangle : Shape {
Rectangle(Point xy, int ww, int hh);
Rectangle(point x, point y);
void draw_lines() const;
int height() const { return h;}
int width() const { return w; }
private:
int h;
int w;
};
// pramoygolnik dvoma tochkami
Rectangle::Rectangle(Point xy, int ww, int hh)
: w{ww}, h{hh}
{
if (h<=0 || w<=0)
error("Ошибка не положительна сторона");
add(xy);
}

Rectangle rec00{Point{150,100},200,100};
Rectangle rec11{Point{50,50},Poit{250,150}};
Rectangle rec12{Point{50,150},Point{250,250}};
Rectangle rec21{Point{250,50},200,100};
Rectangle rec22{Point{250,150},200,100};

rect00.set_fill_color(Color::yellow);
rect11.set_fill_color(Color::blue);
rect12.set_fill_color(Color::red);
rect21.set_fill_color(Color::green);
// bistro z Contr + V

rect11.move{400,0);
rect11.set_fill_color(Color::white);
win12.set_label("rectangles2");
//peremishchennya bulo
win12.put_on_top(rect00);
win12.set_label("rectangles 3");

Rect00.set_color(Color::invisible
Rect11.set_color(Color::invisible);
Rect12.set_color(Color::invisible);
Rect21.set_color(Color::invisible);
Rect22.set_color(Color::invisible);

Void Rectangle::draw_lines() const
{
if (fill_color() .visibility()) {
fl_color(fill_color() .as_int());
fl_rectf(point(0) .x,point(0) .y,w,h);
}
if (color() .visibility()) {
fl_color(color() .as_int());
fl_rect(point(0) .x,point(0) .y,w,h);
}
}
// Diagrama cvetov 156 kvadrat 16x16
template<class T> class Vector_ref {
public:
void push_back(T&);
void push_back(T*)
T& operator[] (int i);
const T& operator[] (int i) const;
int size() const;
};

Vector_ref<Rectangle> rect;
Rectangle x{Point{100,200},Point{200,300}};
rect.push_back(x);
rect.push_back(new Rectangle{Point{50,60}Point{80,90}});
for (int i=0; i<rect.size(); ++i) rect[i].move(10,10);

Vector_ref<Rectangle> vr;
for (int i = 0; i<16; ++j) 
for (int j = 0; j<16; ++j) {
vr.push_back(new Rectangle{Point{i*20,j*20},20,20});
vr[vr.size()-1].set_fill_color(Color{i*16+j});
win20.attach(vr[vr.size()-1]);
}

Text t(Point(200,200) ,"A closed polyline thet isn't a poligon");
t.set_color(Color::blue);

struct Text : Shape {
Text(point x, const string& s)
: lab{s},
{ add(x); }
void draw_lines() const;
void set_label(const string& s) { lab = s; }
string label() const { return lab; }
void set_font(Font f) { fnt = f; }
Font font() const { return fnt; }
void set)font_size(int s) { fnt_sz = s; }
int font_size() const { return fnt_sz; }
private:
string lab;
Font fnt {fl_font()};
int fnt_sz {(fl_size()<14)?14:fl_size()};
};


void Text::draw_lines() const
{
fl_draw(lab.c_str(), point(0) .x,point(0) .y);
}

class Font {
public:
enum Font_type {
helvetica               =FL_HELVETICA,         
helvetica_bold          =FL_HELVETICA_BOLD,
helvetica_italic        =FL_HELVETICA_ITALIC,
helvetica_bold_italic   =FL_HELVETICA_BOLD_ITALIC,
courier                 =FL_COURIER,
courier_bold            =FL_COURIER_BOLD,
courier_italic          =FL_COURIER_ITALIC,
courier_bold_italic     =FL_COURIER_BOLD_ITALIC,
times                   =FL_TIMES,
time_bold               =FL_TIME_BOLD,
time_italic             =FL_TIME_ITALIC,
times_bold_italic       =FL_TIMES_BOLD_ITALIC,
symbol                  =FL_SIMBOL,
screen                  =FL_SCREEN,
screen_bold             =FL_SCREEN_BOLD,
zapf_dingbats           =FL_ZAPF_DINGBATS
};

Font(Font_type ff) :f{ff} {}
Font(int ff) :f{ff} {}

int as_int() const { return f; }
private:
int f;
};



